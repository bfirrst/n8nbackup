{
  "active": false,
  "connections": {
    "Switch": {
      "main": [
        [
          {
            "node": "GET profile",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "extract",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "User Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parseJSON": {
      "main": [
        [
          {
            "node": "nutrion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract": {
      "main": [
        [
          {
            "node": "parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "nutrion": {
      "main": [
        [
          {
            "node": "CREATE meals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parser": {
      "main": [
        [
          {
            "node": "IF 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [],
        [],
        [],
        [],
        [],
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CREATE profile": {
      "main": [
        [
          {
            "node": "start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF 2": {
      "main": [
        [
          {
            "node": "parseJSON",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ERROR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CREATE meals": {
      "main": [
        [
          {
            "node": "OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET profile": {
      "main": [
        [
          {
            "node": "IF NO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF NO": {
      "main": [
        [
          {
            "node": "CREATE profile",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SUPA digest": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "YES DIGEST",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NO DIGEST",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escape": {
      "main": [
        [
          {
            "node": "Bot Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "Save Bot Msg",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Log": {
      "main": [
        [
          {
            "node": "Save User Msg",
            "type": "main",
            "index": 0
          },
          {
            "node": "SUPA digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bot Log": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YES DIGEST": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "get_week_meals": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Escape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-16T14:11:58.932Z",
  "id": "liPDaLfhgOmaMMQy",
  "meta": null,
  "name": "NUT 2",
  "nodes": [
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0a73cab2-d78a-4354-a626-2fa054d2426a",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/v",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "c83a3bbf-a07a-4547-aa5f-24d1641dc2fe"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "main"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fa47404d-c110-4d4a-8310-126eb004bd75",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/",
                    "operator": {
                      "type": "string",
                      "operation": "notStartsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "chat"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -5100,
        1000
      ],
      "id": "51676199-c5ce-4df8-b3d8-93530d03afd7",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "const chatId = $items('extract')[0].json.chat_id;\nconst src    = JSON.parse($json.message.content);          // {\"dish\":..,\"grams\":..[, \"time\":\"HH:MM\"]}\n\n// ── московская «сегодня»\nconst now = new Date(new Date().toLocaleString('en-US',{ timeZone:'Europe/Moscow' }));\n\n// берём HH:MM из src.time или текущее\nlet [hh, mm] =\n  src.time?.match(/^(\\d{2}):(\\d{2})$/)?.slice(1) ||\n  [now.getHours(), now.getMinutes()].map(n => String(n).padStart(2,'0'));\n\n// собираем ISO-строку в МСК (+03:00) — без перевода в UTC\nconst pad = n => String(n).padStart(2,'0');\nconst eatenAt = `${now.getFullYear()}-${pad(now.getMonth()+1)}-${pad(now.getDate())}` +\n                `T${hh}:${mm}:00+03:00`;\n\nreturn [{\n  json: {\n    chat_id : chatId,\n    dish    : src.dish,\n    grams   : src.grams,\n    eaten_at: eatenAt\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4000,
        440
      ],
      "id": "92604c2a-5e93-4308-93b9-f7f44591a6a4",
      "name": "parseJSON"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -5400,
        1000
      ],
      "id": "e0961858-b1b5-4fa8-8f57-97475b9bb75d",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "const text = $json.message.text.replace(/^\\/v\\s+/i, '');\nreturn [{ json: { chat_id: $json.message.chat.id, raw: text } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4760,
        520
      ],
      "id": "86742602-bd2a-431d-a6cb-9634c05ac2f6",
      "name": "extract"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Ты нутри-калькулятор.\nНа вход одна строка «dish, grams».\nВерни ТОЛЬКО одну строку JSON:\n{\"dish\":\"…\",\"kcal\":число,\"prot\":число,\"fat\":число,\"carb\":число}\nБез ``` и без пояснений.",
              "role": "system"
            },
            {
              "content": "={{ $json.dish }}, {{ $json.grams }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3780,
        440
      ],
      "id": "d08839e2-1e57-4057-a10e-6edfa0f8647d",
      "name": "nutrion",
      "credentials": {
        "openAiApi": {
          "id": "T10Aj8URpRIqIm4V",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "Ты нутри-парсер.\n\nПолучаешь одну строку с описанием еды, которую ел человек и время употребления.\n\n- Если можешь разумно оценить порцию и массу (число граммов) — даже по словам типа «1 шт», «половина», «два куска» — верни ОДНУ строку JSON:\n\n{\"dish\":\"…\",\"grams\":число[, \"time\":\"HH:MM\"]}\n\n- time указывай, только если нашёл в тексте, без даты.\n\n- Если оценить порцию или время нельзя — верни ТЕКСТ-подсказку:\n*Не распознал* 🤔\n\n*Формат:* /v блюдо граммы [HH:MM]\n*Пример:* /v яблоко 100г 18:00",
              "role": "system"
            },
            {
              "content": "={{ $json.raw }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -4560,
        520
      ],
      "id": "c7aace7a-8198-414f-8c20-2dc802aa21ef",
      "name": "parser",
      "credentials": {
        "openAiApi": {
          "id": "T10Aj8URpRIqIm4V",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# /v РУЧНОЙ ВВОД\n\n\n\n\n",
        "height": 432,
        "width": 1858,
        "color": 4
      },
      "id": "f668a176-4175-46a9-bc2a-0974d12353aa",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4840,
        380
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# ОБЩЕНИЕ С НУТРИЦИОЛОГОМ\n\n\n\n",
        "height": 472,
        "width": 1858,
        "color": 6
      },
      "id": "c1457434-a0a3-47ee-8115-454a5ade87e3",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4840,
        840
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# /start  И СОЗДАНИЕ ПРОФИЛЯ\n\n\n\n",
        "height": 312,
        "width": 858,
        "color": 7
      },
      "id": "8ae98102-a12d-452c-ab8f-749ee6f75e5c",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4840,
        40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "updates": [
          "*"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -5680,
        2080
      ],
      "id": "1aed20ba-1976-4162-b293-efa6f9631fa2",
      "name": "Telegram Trigger",
      "webhookId": "e4d6b058-dc8c-4130-9abd-41243518e824",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "52493568-0b68-46b8-b18a-894cf77bcac1",
                    "leftValue": "={{$json.callback_query.data}}",
                    "rightValue": "manual_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "manual"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5eeb9b3f-d4ce-45f6-bb62-32244fd9a99a",
                    "leftValue": "={{ $json.message.photo[0] }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2f1495ad-2eb2-4729-af5a-23c949adce8c",
                    "leftValue": "={{$json.callback_query.data}}",
                    "rightValue": "dish_yes_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "dish_yes"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.callback_query.data}}",
                    "rightValue": "dish_no_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "c9ead52e-1b81-453a-bd9b-1d18dcbd82bb"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "dish_no"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "646db5d3-3518-4edf-9374-cef371fa7ba9",
                    "leftValue": "={{$json.callback_query.data}}",
                    "rightValue": "alt_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "alt"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1bcf1e75-3e73-465b-8bbb-2665b845e7e9",
                    "leftValue": "={{$json.callback_query.data}}",
                    "rightValue": "weight_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "weight"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6166763a-38e9-494a-aea0-20bdc9626314",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text_cmd"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -5460,
        2000
      ],
      "id": "df9c4d63-e33b-4e37-a054-1e4580d8f028",
      "name": "Switch1",
      "disabled": true
    },
    {
      "parameters": {
        "tableId": "profiles",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "telegram_id",
              "fieldValue": "={{ $('Switch').item.json.message.from.id }}"
            },
            {
              "fieldId": "first_name",
              "fieldValue": "={{ $('Switch').item.json.message.from.first_name }}"
            },
            {
              "fieldId": "username",
              "fieldValue": "={{ $('Switch').item.json.message.from.username }}"
            },
            {
              "fieldId": "locale",
              "fieldValue": "={{ $('Switch').item.json.message.from.language_code }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -4380,
        120
      ],
      "id": "537689f4-d9dd-4f57-8d4e-cccd3ffdae35",
      "name": "CREATE profile",
      "credentials": {
        "supabaseApi": {
          "id": "Lv911zMyYiwiK2FZ",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "meals",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $('parseJSON').item.json.chat_id }}"
            },
            {
              "fieldId": "dish",
              "fieldValue": "={{ $json.message.content.dish }}"
            },
            {
              "fieldId": "grams",
              "fieldValue": "={{ $('parseJSON').item.json.grams }}"
            },
            {
              "fieldId": "kcal",
              "fieldValue": "={{ $json.message.content.kcal }}"
            },
            {
              "fieldId": "prot",
              "fieldValue": "={{ $json.message.content.prot }}"
            },
            {
              "fieldId": "fat",
              "fieldValue": "={{ $json.message.content.fat }}"
            },
            {
              "fieldId": "carb",
              "fieldValue": "={{ $json.message.content.carb }}"
            },
            {
              "fieldId": "eaten_at",
              "fieldValue": "={{ $('parseJSON').item.json.eaten_at }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3380,
        440
      ],
      "id": "7eee632e-b9d4-4f63-ae4a-80774613cc23",
      "name": "CREATE meals",
      "credentials": {
        "supabaseApi": {
          "id": "Lv911zMyYiwiK2FZ",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "11bc0d87-40a0-4a39-b576-9fbb5f7535e8",
              "leftValue": "={{ $json.message.content }}",
              "rightValue": "{",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4220,
        520
      ],
      "id": "e36e6c60-6c6c-4866-92a8-2f80a5355631",
      "name": "IF 2"
    },
    {
      "parameters": {
        "chatId": "={{ $('Switch').item.json.message.from.id }}",
        "text": "=*Привет, {{ $('Switch').item.json.message.from.first_name }}!*\n\nЯ помогу тебе отслеживать рацион, считать КБЖУ и подсказывать, как питаться лучше.\n\n🧾 *Как начать:*\n📸 Просто *отправь фото еды* — я распознаю блюдо и рассчитаю КБЖУ.  \n🧠 Каждое блюдо *сохраняется в твоём дневнике* — можно вернуться, пересмотреть и задать вопросы.  \n📬 *Каждый вечер* я присылаю краткий отчёт и даю рекомендации на завтра.\n\n📝 *Можно вводить вручную:*  \nПример: _/v омлет 2 яйца 09:00_\n\n⚖️ Если не знаешь вес — опиши на глаз, я прикину сам.\n\nГотов? Тогда начинаем — *просто пришли фото!*",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4180,
        160
      ],
      "id": "81fa2e43-fe66-4215-8fd7-8888818b9f6f",
      "name": "start",
      "webhookId": "da4a8d3c-0d67-480c-a25d-4844309807d2",
      "credentials": {
        "telegramApi": {
          "id": "gCihnoY2iryH0uMF",
          "name": "AI_Consultant_01p1_bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('extract').item.json.chat_id }}",
        "text": "={{ $json.message.content }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4000,
        620
      ],
      "id": "a1bf39f7-6b30-4940-9865-479a2ae0aca5",
      "name": "ERROR",
      "webhookId": "da4a8d3c-0d67-480c-a25d-4844309807d2",
      "credentials": {
        "telegramApi": {
          "id": "gCihnoY2iryH0uMF",
          "name": "AI_Consultant_01p1_bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('parseJSON').item.json.chat_id }}",
        "text": "=*{{ $json.dish }} – {{ $json.grams }} г*\n\n*Калорий:* {{ $json.kcal }}\n*Б:* {{ $json.prot }} *Ж:* {{ $json.fat }} *У:* {{ $json.carb }}\n\n✔️ _сохранил в память_",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "🚫 не сохранять",
                    "additionalFields": {
                      "callback_data": "=cancel_{{ $json.id }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -3200,
        440
      ],
      "id": "0dd0279b-d5d4-4057-b9de-561b3c9b5835",
      "name": "OK",
      "webhookId": "da4a8d3c-0d67-480c-a25d-4844309807d2",
      "credentials": {
        "telegramApi": {
          "id": "gCihnoY2iryH0uMF",
          "name": "AI_Consultant_01p1_bot"
        }
      }
    },
    {
      "parameters": {
        "content": "## [включать только для настройки]\n\n",
        "height": 432,
        "width": 598,
        "color": 5
      },
      "id": "46da100b-99dc-450c-b209-463f6a3daf75",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5760,
        1920
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "profiles",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "telegram_id",
              "condition": "eq",
              "keyValue": "={{ $json.message.from.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -4760,
        140
      ],
      "id": "079862b1-5eff-47fa-90df-54319b5f8829",
      "name": "GET profile",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "Lv911zMyYiwiK2FZ",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "dbd664b4-20b3-4d51-8000-20892b93782d",
              "leftValue": "={{ Object.keys($items(\"GET profile\")[0].json || {}).length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4580,
        140
      ],
      "id": "47a0839e-c59e-4287-9994-862cbd9b402f",
      "name": "IF NO"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3980,
        1180
      ],
      "id": "66fa42b2-da70-4d9f-a57d-410d5f729a68",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "T10Aj8URpRIqIm4V",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.content }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -3340,
        940
      ],
      "id": "9b5534b7-9c5b-47e1-a045-d0540d8c9c13",
      "name": "Telegram",
      "webhookId": "ce8565f7-fca8-4e4e-b9ba-109e833298a3",
      "credentials": {
        "telegramApi": {
          "id": "gCihnoY2iryH0uMF",
          "name": "AI_Consultant_01p1_bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "336d64ed-3993-434e-9bbd-abb9f3c777f3",
              "leftValue": "={{ $json.summary_md }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4440,
        1120
      ],
      "id": "0b5ad852-8189-4e92-8f58-b447c365e976",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://mlmjyvedeqdqtsmmxnjm.supabase.co/rest/v1/rpc/get_current_summary",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1sbWp5dmVkZXFkcXRzbW14bmptIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODM1MDk4MSwiZXhwIjoyMDYzOTI2OTgxfQ.ll2wVwEq28eM8NsqUQalbGlxLQB-FMoOI_Qgs8_5prg"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "_chat_id",
              "value": "={{ $json.chat_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4620,
        1120
      ],
      "id": "13da2602-82ba-41dd-b60d-3176fe8a1aa1",
      "name": "SUPA digest",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "G6YhkSorlbr3ZIxC",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "64fb8515-cda5-462c-afcf-2c9865a3631d",
              "name": "hasDigest",
              "value": false,
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4200,
        1100
      ],
      "id": "6d01bbe1-d084-40d1-8716-95e387dbad82",
      "name": "NO DIGEST"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "08b17997-5514-4157-9518-365744b2a556",
              "name": "hasDigest",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4200,
        940
      ],
      "id": "c35be2ed-b483-496e-9889-a8d15ae8e6d7",
      "name": "YES DIGEST"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "meals",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "chat_id",
              "condition": "eq",
              "keyValue": "={{ $('Switch').item.json.message.from.id }}"
            },
            {
              "keyName": "eaten_at",
              "condition": "gte",
              "keyValue": "={{ (() => {\n     // «сейчас» в Москве\n     const now = new Date(new Date()\n                 .toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));\n\n     // минус 7 суток\n     now.setDate(now.getDate() - 7);\n\n     // ставим начало дня и возвращаем ISO +03:00\n     now.setHours(0,0,0,0);\n     return now.toISOString().replace('Z','+03:00');\n})() }}\n"
            },
            {
              "keyName": "eaten_at",
              "condition": "lte",
              "keyValue": "={{ (() => {\n     const now = new Date(new Date()\n                 .toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));\n     return now.toISOString().replace('Z','+03:00');\n})() }}\n"
            },
            {
              "keyName": "deleted",
              "condition": "is",
              "keyValue": "false"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -3820,
        1160
      ],
      "id": "3c3cfd21-87ef-4e02-ba15-44f8d4c2e8fe",
      "name": "get_week_meals",
      "credentials": {
        "supabaseApi": {
          "id": "Lv911zMyYiwiK2FZ",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## [основной триггер]\n\n",
        "height": 272,
        "width": 298
      },
      "id": "99f97fd0-4e23-417c-bbce-fb5a3cdbd79b",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -5500,
        940
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const escapeMdV2 = s =>\n  s.replace(/[_*[\\]()~`>#+\\-=|{}.!]/g, '\\\\$&');\n\nif (item.json.output) {\n  item.json.output = escapeMdV2(item.json.output);\n}\nreturn item;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        940
      ],
      "id": "cfa05dad-63be-4a2e-8b96-d4efb718881b",
      "name": "Escape"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "442870a4-1075-4f7c-bdce-f6011d4c93da",
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "d38f3a89-b513-46c0-b960-ba64a754bd58",
              "name": "session_id",
              "value": "={{ 'user_' + $json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "8d169f91-297e-494d-8260-224ef6f88cba",
              "name": "role",
              "value": "user",
              "type": "string"
            },
            {
              "id": "011e9af4-a978-4985-bf28-dbafcb4fa2e9",
              "name": "content",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "3ad625a1-0bdd-48cf-901b-d1306d890628",
              "name": "username",
              "value": "={{ $json.message.from.username }}",
              "type": "string"
            },
            {
              "id": "c4c0ac19-2cdd-451b-b0f0-7829e06bd7b6",
              "name": "first_name",
              "value": "={{ $json.message.from.first_name }}",
              "type": "string"
            },
            {
              "id": "c270f762-1398-45d2-a58c-883b5f512bd3",
              "name": "metadata",
              "value": "={{ JSON.stringify($json) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4800,
        1020
      ],
      "id": "22c09485-4bcf-4614-9fe0-1067ab42885d",
      "name": "User Log"
    },
    {
      "parameters": {
        "tableId": "chat_logs",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $json.chat_id }}"
            },
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $json.session_id }}"
            },
            {
              "fieldId": "role",
              "fieldValue": "={{ $json.role }}"
            },
            {
              "fieldId": "content",
              "fieldValue": "={{ $json.content }}"
            },
            {
              "fieldId": "username",
              "fieldValue": "={{ $json.username }}"
            },
            {
              "fieldId": "first_name",
              "fieldValue": "={{ $json.first_name }}"
            },
            {
              "fieldId": "metadata",
              "fieldValue": "={{ $json.metadata }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -4620,
        940
      ],
      "id": "aa3f416f-c5b3-4252-8222-3e4d12ef5613",
      "name": "Save User Msg",
      "credentials": {
        "supabaseApi": {
          "id": "Lv911zMyYiwiK2FZ",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "chat_logs",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $('Bot Log').item.json.chat_id }}"
            },
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('Bot Log').item.json.session_id }}"
            },
            {
              "fieldId": "role",
              "fieldValue": "={{ $('Bot Log').item.json.role }}"
            },
            {
              "fieldId": "content",
              "fieldValue": "={{ $('Bot Log').item.json.content }}"
            },
            {
              "fieldId": "metadata",
              "fieldValue": "={{ $('Bot Log').item.json.metadata }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3180,
        940
      ],
      "id": "9290d7fd-4913-47a1-8523-c8ace2a24da6",
      "name": "Save Bot Msg",
      "credentials": {
        "supabaseApi": {
          "id": "Lv911zMyYiwiK2FZ",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "03bc3c9d-7d1b-4f70-999d-115edccd98dd",
              "name": "chat_id",
              "value": "={{ $('User Log').item.json.chat_id }}",
              "type": "string"
            },
            {
              "id": "9093739a-9c1b-4b54-8487-9a79272b6892",
              "name": "session_id",
              "value": "={{ $('User Log').item.json.session_id }}",
              "type": "string"
            },
            {
              "id": "4bc4cf2d-63c7-49f3-bae8-7d08160305ca",
              "name": "role",
              "value": "assistant",
              "type": "string"
            },
            {
              "id": "494392e4-828d-4fd6-a70b-af2c9e050558",
              "name": "content",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "581ad272-fd98-4fa1-8bb1-b985f816079d",
              "name": "metadata",
              "value": "={{ JSON.stringify($json) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3500,
        940
      ],
      "id": "6e2de43c-7a07-4e02-8ece-fd849c25cb0d",
      "name": "Bot Log"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -3580,
        1340
      ],
      "id": "64768f45-c548-454c-9017-968a72c6689c",
      "name": "nutrion 2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Switch').item.json.message.text }}",
        "options": {
          "systemMessage": "Ты дипломированный нутрициолог. Твоя задача отвечать на вопросы пользователя и консультировать его. Веди себя как профессионал, но старайся общаться достаточно естественно, так как беседа ведется в мессенджере.\n\nНа вход получаешь:\n1. Отчет по питанию для клиента за прошедший день: {{ $json.summary_md }}\n2. kcal за день: {{ $json.kcal }}\n3. fat: {{ $json.fat }}\n4. carb: {{ $json.carb }}\n5. prot: {{ $json.prot }}\n6. hasDigest: {{ $json.hasDigest }}\n\n• Если отчет за день есть, а hasDigest = true → используй этот отчет в качестве основного источника данных при осставлении рекомендаций для человека и ответа на его вопросы. \n• Если инфы нет, а hasDigest = false → значит просто не учитывай эту информацию (не обязательно уведомлять человека) и общайся, стараясь быть ценным для собеседника\n• У тебя есть доступ к инструменту \"get_today_meals\" который дает доступ к полному рациону питания человека за последние две недели, используй его при необходимости.\n\n- Формат сообщения должен быть Markdown для телеграм, для жирного шрифта используй одну * в начале и в конце, а для курсива _ вместо ** (ПРИМЕР: *жирный*, _курсив_).\n- Разрешается использовать тематические эмоджи где уместно.\n- Используй жирный *только для целых слов или фраз*, курсив — тоже для целых слов.\n- Не вставляй * внутри markdown-заголовков и списков.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -4000,
        940
      ],
      "id": "80e8355a-8596-4e33-827b-fedc06e69a8f",
      "name": "AI Agent"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-06-15T12:55:16.736Z",
      "updatedAt": "2025-06-15T12:55:16.736Z",
      "id": "E3Jvcdicex5zM4E5",
      "name": "ИИздец"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-07-01T21:33:32.000Z",
  "versionId": "9f46b27a-8185-4047-b875-ebb4690093ad"
}